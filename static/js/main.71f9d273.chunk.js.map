{"version":3,"sources":["ForecastLocation.js","DayCard.js","DegreeSwitch.js","CurrentWeather.js","Forecast.js","App.js","serviceWorker.js","index.js"],"names":["moment","require","ForecastHeader","newDate","Date","className","format","DayCard","reading","degreeType","weekday","dt","setTime","kelvin","main","temp","fahrenheit","Math","round","celsius","iconUrl","weather","icon","src","alt","DegreeSwitch","switchValue","type","id","onChange","htmlFor","CurrentWeather","currentTemp","desc","wind","Fragment","Forecast","state","fullData","dailyData","componentDidMount","fetch","then","res","json","data","setState","currentConditionIcon","currentConditionOwIcon","currentDesc","description","currentWind","speed","list","filter","dt_txt","includes","updateForecastDegree","event","target","value","currentOwIcon","formatDayCards","map","index","key","console","log","ForecastLocation","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.71f9d273.chunk.js","sourcesContent":["import React from 'react';\nvar moment = require('moment');\n\nconst ForecastHeader = () => {\n    let newDate = new Date();\n\n    return (\n        <header className=\"location text-white mb-3\">\n            <h5 className=\"display-5 mb-0\">Dallas, TX</h5>\n            <span>{moment(newDate).format('dddd')}, </span>\n            <span>{moment(newDate).format('MMMM Do')}, </span>\n            <span>{moment(newDate).format('YYYY')}</span>\n        </header>\n    )\n}\n\nexport default ForecastHeader;","import React from 'react';\nvar moment = require('moment');\n\nconst DayCard = ({ reading, degreeType }) => {\n    let newDate = new Date();\n    const weekday = reading.dt * 1000\n    newDate.setTime(weekday)\n\n    const kelvin = reading.main.temp\n    const fahrenheit = Math.round((kelvin - 273.15) * 9/5 + 32)\n    const celsius = Math.round(kelvin - 273.15)\n    const iconUrl = `http://openweathermap.org/img/wn/${reading.weather[0].icon}@2x.png`\n\n    return (\n        <div className=\"col pl-0 pr-0\">\n            <div className=\"card\">\n                <div className=\"card-body pl-1 pr-1\">\n                    <p className=\"card-body__day font-weight-bold mb-0\">{moment(newDate).format('dddd')}</p>\n                    <img src={iconUrl} alt=\"icon\" className=\"card-body__icon order-md-2\" />\n                    <p className=\"card-body__temp h2 mb-0\">{degreeType === \"celsius\" ? celsius + \"°\" : fahrenheit + \"°\"}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DayCard;","import React from 'react'\n\nconst DegreeSwitch = ({degreeType, switchValue}) => {\n    return (\n        <div className=\"degree-switch d-flex pt-2\">\n            <div className=\"pr-2\">°F</div>\n            <div className=\"custom-control custom-switch\">\n                <input\n                    type=\"checkbox\"\n                    className=\"custom-control-input\"\n                    id=\"customSwitch1\"\n                    onChange={switchValue}\n                />\n                <label className=\"custom-control-label\" htmlFor=\"customSwitch1\"> </label>\n            </div>\n            <div>°C</div>\n        </div>\n    )\n}\n\nexport default DegreeSwitch;","import React from 'react';\n\nconst CurrentWeather = ({degreeType, currentTemp, icon, desc, wind }) => {\n    const kelvin = currentTemp\n    const fahrenheit = Math.round((kelvin - 273.15) * 9/5 + 32)\n    const celsius = Math.round(kelvin - 273.15)\n    const iconUrl = `http://openweathermap.org/img/wn/${icon}@2x.png`\n\n    return (\n        <React.Fragment>\n            <div className=\"h1 mb-0\">{degreeType === \"celsius\" ? celsius + \"°\" : fahrenheit + \"°\"}</div>\n            <img src={iconUrl} alt=\"icon\" className=\"current-weather__icon ow-icon\" />\n            <div className=\"current-weather__desc\">\n                <p className=\"mb-0\">{desc}</p>\n                <p className=\"mb-0\">{Math.round(wind)} mph</p>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default CurrentWeather;","import React from 'react';\nimport ForecastLocation from './ForecastLocation';\nimport DayCard from './DayCard';\nimport DegreeToggle from './DegreeToggle';\nimport DegreeSwitch from './DegreeSwitch';\n// import Icon from './Icon';\nimport CurrentWeather from './CurrentWeather';\n\n\nclass Forecast extends React.Component {\n    state = {\n        fullData: [],\n        dailyData: [],\n        degreeType: \"fahrenheit\"\n    }\n\n    componentDidMount = () => {\n        const forecastTodayUrl = \"https://community-open-weather-map.p.rapidapi.com/weather?&q=dallas\"\n        const forecastWeekURL = \"https://community-open-weather-map.p.rapidapi.com/forecast?q=dallas&cnt=40\"\n\n        fetch(forecastTodayUrl, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"e392b0f21emsh6c184cb02588600p1227d3jsndc379560ad89\"\n            }\n        })\n        .then(res => res.json())\n        .then(data => {\n            this.setState({\n                currentConditionIcon: data.weather[0].id,\n                currentConditionOwIcon: data.weather[0].icon,\n                currentTemp: data.main.temp,\n                currentDesc: data.weather[0].description,\n                currentWind: data.wind.speed\n            })\n        })\n\n        fetch(forecastWeekURL, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"e392b0f21emsh6c184cb02588600p1227d3jsndc379560ad89\"\n            }\n        })\n        .then(res => res.json())\n        .then(data => {\n            const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n            this.setState({\n                fullData: data.list,\n                dailyData: dailyData\n            })\n        })\n    }\n\n    updateForecastDegree = event => {\n        this.setState({\n            degreeType: event.target.value\n        })\n        return this.state.degreeType\n    }\n\n    currentOwIcon = () => {\n        const icon = `http://openweathermap.org/img/wn/${this.state.currentConditionOwIcon}@2x.png`\n        return icon\n    }\n\n    formatDayCards = () => {\n        return this.state.dailyData.map((reading, index) => <DayCard reading={reading} key={index} degreeType={this.state.degreeType} />)\n    }\n\n    switchValue = event => {\n        console.log(\"changed\");\n        if (this.state.degreeType === \"fahrenheit\") {\n            this.setState({\n                degreeType: \"celsius\"\n            })\n        } else {\n            this.setState({\n                degreeType: \"fahrenheit\"\n            })\n        }\n        return this.state.degreeType\n    }\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <ForecastLocation />\n                <div className=\"row current-weather\">\n                    <div className=\"current-weather__readings col d-flex flex-wrap align-items-center\">\n                        <CurrentWeather\n                            degreeType={this.state.degreeType}\n                            currentTemp={this.state.currentTemp}\n                            icon={this.state.currentConditionOwIcon}\n                            desc={this.state.currentDesc}\n                            wind={this.state.currentWind}\n                        />\n                    </div>\n                    <div className=\"current-weather__switch col d-flex justify-content-end\">\n                        {/* <DegreeToggle degreeType={this.state.degreeType} updateForecastDegree={this.updateForecastDegree} /> */}\n                        <DegreeSwitch  degreeType={this.state.degreeType} switchValue={this.switchValue} />\n                    </div>\n                </div>\n                <div className=\"weekly-forecast row\">\n                    {this.formatDayCards()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Forecast;","import React from 'react';\nimport './App.css';\nimport Forecast from './Forecast';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Forecast />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}